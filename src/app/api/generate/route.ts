import { NextRequest, NextResponse } from 'next/server';
import { generateContent, updateFile } from './geminiService';
import { parseGeminiResponse } from './fileParser';

export async function POST(req: NextRequest) {
  const body = await req.json();
  const prompt = body.prompt;
  const files = body.files || null;

  const apiKey = process.env.GEMINI_API_KEY;

  if (!apiKey) {
    return NextResponse.json({ error: 'Missing Gemini API key' }, { status: 500 });
  }

  if (!prompt) {
    return NextResponse.json({ error: 'Missing prompt' }, { status: 400 });
  }

  // If files are provided, do follow-up update logic
  if (files) {
    // Heuristic: decide which files to update
    const lowerPrompt = prompt.toLowerCase();
    let updateHtml = false, updateCss = false, updateJs = false;
    if (lowerPrompt.match(/style|color|font|background|css/)) updateCss = true;
    if (lowerPrompt.match(/script|function|button|click|js|javascript/)) updateJs = true;
    if (lowerPrompt.match(/section|navbar|content|page|html|text|heading|title/)) updateHtml = true;
    if (!updateHtml && !updateCss && !updateJs) updateHtml = updateCss = updateJs = true;
    const updated: string[] = [];
    if (updateHtml) updated.push('html');
    if (updateCss) updated.push('css');
    if (updateJs) updated.push('js');

    try {
      let html = files.html || '';
      let css = files.css || '';
      let js = files.js || '';

      if (updateHtml) {
        html = await updateFile(apiKey, 'html', prompt, html);
      }
      if (updateCss) {
        css = await updateFile(apiKey, 'css', prompt, css);
      }
      if (updateJs) {
        js = await updateFile(apiKey, 'js', prompt, js);
      }

      return NextResponse.json({
        success: true,
        updated,
        html,
        css,
        js
      });
    } catch (error) {
      console.error('Follow-up update error:', error);
      return NextResponse.json({
        success: false,
        error: 'Failed to update website. Please try again.'
      }, { status: 500 });
    }
  }

  // If files are not provided, do initial full generation logic
  try {
    const geminiPrompt = `Based on this request: "${prompt}"

Generate a complete website with three separate files. Please format your response EXACTLY as follows:

<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Website Title</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Your HTML content here -->
    <script src="index.js"></script>
</body>
</html>

<!-- style.css -->
/* Your CSS styles here */
body {
    font-family: Arial, sans-serif;
}

<!-- index.js -->
// Your JavaScript code here
console.log('Website loaded');

Make sure to:
1. Create a fully functional website based on the user's request
2. Include proper HTML structure with external CSS and JS references
3. Write comprehensive CSS for styling
4. Add interactive JavaScript functionality
5. Do not include any explanatory text outside the file contents
6. Use the exact comment format shown above to separate files
7. navbar should always point to section in html not external page and link
8. if user demand a multi page website create sections for that corresponding pages and only renders the section when it is clicked using navbar
   giving a multi page website feel   
`;

    const rawResponse = await generateContent(apiKey, geminiPrompt);
    const { html, css, js } = parseGeminiResponse(rawResponse);

    return NextResponse.json({
      success: true,
      projectName: 'AI Generated Website',
      description: 'A website generated by AI with separate HTML, CSS, and JS files',
      html,
      css,
      js
    });
  } catch (error) {
    console.error('Generation error:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to generate website. Please try again.'
    }, { status: 500 });
  }
}